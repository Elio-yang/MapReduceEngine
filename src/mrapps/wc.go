package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import "mpe/mr"
import "unicode"
import "strings"
import "strconv"

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func Map(filename string, contents string) []mr.KeyValue {
	// param is filename and file content
	// return type if []{key,value}
	// function to detect word separators.

	// used for splits using non-letter char
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// coz of ff , only letters inn words
	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)
	// key-value array
	kva := []mr.KeyValue{}
	for _, w := range words {
		// for each word set the value to one
		// this is intermediate value
		// not sorted & not reduced
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	// as the values is all 1
	// {"1","1",...}
	// so the length is times of a special key
	return strconv.Itoa(len(values))
}
